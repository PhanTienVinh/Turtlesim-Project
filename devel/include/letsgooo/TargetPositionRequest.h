// Generated by gencpp from file letsgooo/TargetPositionRequest.msg
// DO NOT EDIT!


#ifndef LETSGOOO_MESSAGE_TARGETPOSITIONREQUEST_H
#define LETSGOOO_MESSAGE_TARGETPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace letsgooo
{
template <class ContainerAllocator>
struct TargetPositionRequest_
{
  typedef TargetPositionRequest_<ContainerAllocator> Type;

  TargetPositionRequest_()
    : target_x(0.0)
    , target_y(0.0)
    , target_theta(0.0)  {
    }
  TargetPositionRequest_(const ContainerAllocator& _alloc)
    : target_x(0.0)
    , target_y(0.0)
    , target_theta(0.0)  {
  (void)_alloc;
    }



   typedef double _target_x_type;
  _target_x_type target_x;

   typedef double _target_y_type;
  _target_y_type target_y;

   typedef double _target_theta_type;
  _target_theta_type target_theta;





  typedef boost::shared_ptr< ::letsgooo::TargetPositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::letsgooo::TargetPositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TargetPositionRequest_

typedef ::letsgooo::TargetPositionRequest_<std::allocator<void> > TargetPositionRequest;

typedef boost::shared_ptr< ::letsgooo::TargetPositionRequest > TargetPositionRequestPtr;
typedef boost::shared_ptr< ::letsgooo::TargetPositionRequest const> TargetPositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::letsgooo::TargetPositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::letsgooo::TargetPositionRequest_<ContainerAllocator1> & lhs, const ::letsgooo::TargetPositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_x == rhs.target_x &&
    lhs.target_y == rhs.target_y &&
    lhs.target_theta == rhs.target_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::letsgooo::TargetPositionRequest_<ContainerAllocator1> & lhs, const ::letsgooo::TargetPositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace letsgooo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::letsgooo::TargetPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::letsgooo::TargetPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::letsgooo::TargetPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58fcf218a612dadf18639e716d74ede6";
  }

  static const char* value(const ::letsgooo::TargetPositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58fcf218a612dadfULL;
  static const uint64_t static_value2 = 0x18639e716d74ede6ULL;
};

template<class ContainerAllocator>
struct DataType< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "letsgooo/TargetPositionRequest";
  }

  static const char* value(const ::letsgooo::TargetPositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 target_x\n"
"float64 target_y\n"
"float64 target_theta\n"
;
  }

  static const char* value(const ::letsgooo::TargetPositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_x);
      stream.next(m.target_y);
      stream.next(m.target_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetPositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::letsgooo::TargetPositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::letsgooo::TargetPositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_x);
    s << indent << "target_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_y);
    s << indent << "target_theta: ";
    Printer<double>::stream(s, indent + "  ", v.target_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LETSGOOO_MESSAGE_TARGETPOSITIONREQUEST_H
